@using AzDoc.Helpers
@using BLL.Common.Enums

@{
    var permissions = Permissions.GetAll(RightType.SignerNotEImza);
}

<div class="mModal">
    <div class="modal fade modalBtn" id="signatureDialogModal" tabindex="-1" role="dialog" aria-labelledby="prAddModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header"></div>
                <div class="modal-header2">
                    <span>İmzalama paneli</span>
                </div>

                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group" style="text-align: left!important">
                                <label for="ctlCertificates">Sertifikatınızı seçin:</label>
                                <select class="form-control" name="" id="ctlCertificates"></select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <textarea class="form-control" id="signatureNote"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div id="progressBarContainer" class="container">
                                <p id="progressStatus"></p>
                                <div class="progress">
                                    <div id="progressBar"
                                         class="progress-bar progress-bar-striped active"
                                         role="progressbar"
                                         aria-valuenow="0"
                                         aria-valuemin="0"
                                         aria-valuemax="100"
                                         style="width:0%">
                                        0
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer justify-content-center">
                    <div class="col-3">
                        <button type="button" id="signFile" class="mBtn mBtn-pr defaultBtn" style="width: 100%">Təsdiqlə</button>
                        <button type="button" class="btn btn-secondary" id="getCerts" hidden></button>
                        <input type="file" class="custom-file-input" id="files" multiple hidden>
                    </div>
                    <div class="col-3">
                        <button type="button" class="mBtn mBtn-sec mr-5 defaultBtn closeBtn" style="width: 100%">Bağla</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* elekton imzasiz imzalama paneli *@
<div class="mModal">
    <div class="modal fade modalBtn" id="notEImzaSignatureModal" tabindex="-1" role="dialog" aria-labelledby="prAddModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header"></div>
                <div class="modal-header2">
                    <span>İmzanı təsdiq etməyə əminsinizmi ?</span>
                </div>

                <div class="modal-body" style="max-height: 70vh;overflow-y: auto">
                    <div class="row">
                        <div class="col-12">
                            <textarea class="form-control" id="notESignNote"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer justify-content-center">
                    <div class="col-3">
                        <button type="button" id="notEImzaAccept" class="mBtn mBtn-pr defaultBtn" style="width: 100%">Təsdiqlə</button>
                    </div>
                    <div class="col-3">
                        <button type="button" class="mBtn mBtn-sec mr-5 defaultBtn closeBtn" style="width: 100%">Bağla</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var filesarray = [];
    var eimza = eimzaLib();

    $("#sign").on("click",
        function () {
            var token = $("#spanToken").html();

            $.ajax({
            type: 'GET',
            url: '/az/Document/ValidateSign?token=' + token,
            beforeSend: window.ShowLoading(),
            success: function () {
                var result = '@permissions.Has(RightType.SignerNotEImza)';
                if (result=='True') {
                    $('#notEImzaSignatureModal').modal('toggle');
                } else {
                    $('#signatureDialogModal').modal('toggle');
                    eimza.isSigningServiceWorking().then(onSigningWorking, onSigningDown);

                    //imzanin melumatlarini getirir
                    $("button#getCerts").click(function () {
                        reset();
                        $("#progressBarContainer").hide();
                        eimza.readCertificates().then(onSuccessReadCertificates, onError);
                    });
                }

            },
            complete: function() {
                window.CloseLoading();
            }
        });

        });

    $("#notEImzaAccept").on("click", function () {
        var spanToken = $("#spanToken").html();
        var desc = $('#notESignNote').val();

        $.ajax({
            url: `/az/ESign/SignDocNotESign?token=${spanToken}`,
            type: 'POST',
            cache: false,
            contentType: false,
            processData: false,
            data: {  desc: desc},
            beforeSend: window.ShowLoading(),
            success: function (data) {
                if (data) {
                    $("#notEImzaSignatureModal").modal("hide");

                    var grid = $($("#DocGrid").find("input")[0]).attr("id");

                    setTimeout(function () {
                        $('#' + grid).bindgrid();
                    },
                        3000);

                    Swal.fire({
                        type: 'success',
                        title: 'Sənədin imzalanması uğurla başa çatdı.',
                        showConfirmButton: false,
                        timer: 1000
                    });
                } else {
                    toastr.warning("Sənədin imzalanması uğursuz oldu.");
                }
            },
            complete: function () {
                window.CloseLoading();
            },
            error: function (response) {
                console.log('error', response);
            }
        });
    });

    function onSigningWorking() {
        // enable all

        $("button#getCerts").click();

        $("#failinfo").hide();
        var formData = new FormData();

        var token = $("#spanToken").html();

        $.ajax({
            type: 'GET',
            url: '/az/ESign/GetMainFile?token=' + token,
            beforeSend: window.ShowLoading(),
            success: function (data) {
                console.log(data);

                var blob = new Blob([base64ToArrayBuffer(data.Base64)], { type: "octet/stream" });//, url = window.URL.createObjectURL(blob);

                //imzalama
                $("#signFile").click(function () {
                    var select = document.getElementById("ctlCertificates");
                    var certSerialNumber = select.options[select.selectedIndex].value;
                    var certDetails = select.options[select.selectedIndex].text;

                    var jsonString = `{"${certDetails.split(',').join('", "').split('=').join('": "')}"}`;
                    var object = JSON.parse(jsonString);
                    console.log(object);

                    var serialNumber = $.trim(object.SERIALNUMBER);

                    if (serialNumber !== '@SessionHelper.UserFIN' && ($.inArray(serialNumber, exceptFin)===-1)) {
                        return toastr.warning("Seçdiyiniz sertifikat mövcud istifadəçiyə aid deyil.");
                    }

                    reset();
                    changeProgressBar(1, "İmzalama prosesi başlayıb ....");
                    formData.append("AuthCertificateSerialNumber", certSerialNumber);
                    formData.append("file0", blob, data.FileName);

                    eimza.signLocalFiles(formData).then(onSuccess, onError);

                    progressInterval = setInterval(function () {
                            eimza.getProgress().then(onProgressSuccess);
                        },
                        500);
                });
            },
            complete: function() {
                window.CloseLoading();
            }
        });
    }

    function base64ToArrayBuffer(base64) {
        var binaryString = window.atob(base64);
        var binaryLen = binaryString.length;
        var bytes = new Uint8Array(binaryLen);
        for (var i = 0; i < binaryLen; i++) {
            var ascii = binaryString.charCodeAt(i);
            bytes[i] = ascii;
        }
        return bytes;
    }

    var saveData = (function () {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        return function (data, fileName) {
            var blob = new Blob([base64ToArrayBuffer(data)], { type: "octet/stream" }),
                url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);
        };
    }());

    function onSigningDown() {
        // hide everything
        // show error message
        $("#mainContainer").hide();
        $("#failinfo").show();
        $("#failinfo").html(
            "Yeni Online Imzalayici proqrami yazılmayıb və ya işləmir. Zəhmət olmasa yükləyin."
        );
    }

    function reset() {
        console.log("reset");
        $("#progressBarContainer").show();
        $("#failinfo").hide();
    }

    function changeProgressBar(percentage, status) {
        console.log("changeProgressBar");
        $("#progressBar").css("width", percentage + "%");
        $("#progressBar").html(percentage + "%");

        $("#progressStatus").html(status);
    }

    function onSuccessReadCertificates(data, status) {
        console.log("onSuccessReadCertificates");

        var jsonString = `{"${data.certificates[0].subject.split(',').join('", "').split('=').join('": "')}"}`;
        var object = JSON.parse(jsonString);

        console.log(object.SERIALNUMBER);

        if (data.errorCode !== 0) {
            toastr.warning(data.errorDetails);
            $("#progressBarContainer").hide();
            $("#failedMessage").show();
            $("#failedMessage").html(data.errorDetails);
        }

        if (data.certificates) {
            var options = "";
            for (var i = 0; i < data.certificates.length; i++) {
                options +=
                    '<option value="' +
                    data.certificates[i].serialNumber +
                    '">' +
                    data.certificates[i].subject +
                    "</option>";
            }
            $("#certificatesDiv").show();
            $("select#ctlCertificates").html(options);
        }
    }

    function onSuccess(data, status) {
        if (data.edocFile) {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var tokenDocId = $("#spanToken").html();
            var file = dataURLtoFile('data:,' + data.edocFile.rawData, data.edocFile.fileName);
            var formData = new FormData();
            console.log(file);

            formData.append('files', file, file.name);
            formData.append("description", $('#signatureNote').val());
            formData.append("__RequestVerificationToken", token);

            $.ajax({
                url: `/az/ESign/ReceiveSignedDoc?token=${tokenDocId}`,
                type: 'POST',
                cache: false,
                contentType: false,
                processData: false,
                data: formData,
                beforeSend: window.ShowLoading(),
                success: function (data) {
                    if (data) {
                        $("#signatureDialogModal").modal("hide");

                        var grid = $($("#DocGrid").find("input")[0]).attr("id");

                        setTimeout(function () {
                            $('#'+grid).bindgrid();
                        },
                            3000);

                        Swal.fire({
                            type: 'success',
                            title: 'Sənədin imzalanması uğurla başa çatdı.',
                            showConfirmButton: false,
                            timer: 1000
                        });
                    } else {
                        toastr.warning("Sənədin imzalanması uğursuz oldu.");
                    }
                },
                complete: function() {
                    window.CloseLoading();
                },
                error: function (response) {
                    console.log('error', response);
                }
            });
        } else {
            toastr.error(data.message);
        }

        if (data.errorCode !== 0) {
            $("#progressBarContainer").hide();
            $("#failinfo").show();
            $("#failinfo").html(data.errorDetails);
        } else if (
            data.authCertificateSubject !== undefined &&
            data.signCertificateSubject !== undefined
        ) {
            var certificateData = "";
            certificateData =
                certificateData + "<p>" + data.authCertificateSerialNumber + "</p>";
            certificateData =
                certificateData + "<p>" + data.authCertificateSubject + "</p>";
            certificateData =
                certificateData + "<p>" + data.signCertificateSerialNumber + "</p>";
            certificateData =
                certificateData + "<p>" + data.signCertificateSubject + "</p>";

            $("#certSubject").html(certificateData);
        } else if (data.edocFile !== undefined) {
            if (data.edocFile.rawData != undefined) {
                $("#rawData").html(data.edocFile.rawData);
            } else {
                $("#rawData").html(data.edocFile);
            }

            changeProgressBar(100, "Sənəd müvəffəqiyyətlə imzalandı !");
        }

        if (progressInterval !== undefined) {
            console.log("clear interval");
            window.clearInterval(progressInterval);
        }
    }

    function onError(err) {
        console.log("onError", err);
    }

    function onProgressSuccess(data, status) {
        console.log('onProgressSuccess >> ', data);
        if (data.progress === null) {
            changeProgressBar(100, 'İmzalama prosesi uğurla bitib !');
        } else if (data.progress.status === true) {
            changeProgressBar(data.progress.percentage, data.progress.state);
        }
    }

    function dataURLtoFile(dataurl, filename) {
        var parts = dataurl.split(',');
        bstr = atob(parts[1]), n = bstr.length, fileBuffer = new Uint8Array(n);
        while (n--) {
            fileBuffer[n] = bstr.charCodeAt(n);
        }
        return new File([fileBuffer], filename, { type: 'edoc' });
    }
</script>