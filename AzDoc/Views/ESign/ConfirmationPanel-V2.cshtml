@using AzDoc.Helpers
@using BLL.Models.Document
@model BaseElectronDoc

<div class="mModal">
    <div class="modal fade modalBtn" id="docConfirmationDialogModal" tabindex="-1" role="dialog" aria-labelledby="prAddModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header"></div>
                <div class="modal-header2">
                    <span>Sənədi təsdiq etməyə əminsiniz ?</span>
                </div>

                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group" style="text-align: left!important">
                                <label for="ctlDocConfirmCertificates">Sertifikatınızı seçin:</label>
                                <select class="form-control" name="" id="ctlDocConfirmCertificates"></select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <textarea class="form-control" id="docConfirmNote"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer justify-content-center">
                    <div class="col-3">
                        <button type="button" id="docConfirmDocBtn" class="mBtn mBtn-pr defaultBtn" style="width: 100%">
                            Təsdiqlə
                        </button>
                    </div>
                    <div class="col-3">
                        <button type="button" class="mBtn mBtn-sec mr-5 defaultBtn closeBtn" style="width: 100%">
                            Bağla
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<button type="button" id="docConfirmation" hidden="hidden"></button>

<script>
    var filesarray = [];
    var eimza = eimzaLib();
    var tokenDocId = $("#spanToken").html();

    $("#docConfirmation")
        .on("click", function () {
            eimza.isSigningServiceWorking().then(onDocConfirminingWorking, onDocConfirminingDown);
    });

    function readConfirmCertificates() {
        eimza.readCertificatesFromStore()
            .then(onDocConfirmSuccessReadCertificates, onConfirmCertReadError);
    }

    function onDocConfirminingWorking() {
        readConfirmCertificates();

        $("#docConfirmDocBtn").click(function () {
            var select = $("#ctlDocConfirmCertificates");
            var certDetails = select.text();

            var jsonString = `{"${certDetails.split(',').join('", "').split('=').join('": "')}"}`;
            var object = JSON.parse(jsonString);
            var userFin = $.trim(object.SERIALNUMBER);

            if (userFin !== '@SessionHelper.UserFIN' && ($.inArray(userFin, exceptFin) === -1)) {
                return toastr.warning("Seçdiyiniz sertifikat mövcud istifadəçiyə aid deyil.");
            }

            return eimza.checkEdoc('@Model.SignedFileInfo.Base64', '@Model.SignedFileInfo.Name')
                .then(onDocConfirmSuccess, onError);
        });
    }

    function base64ToArrayBuffer(base64) {
        var binaryString = window.atob(base64);
        var binaryLen = binaryString.length;
        var bytes = new Uint8Array(binaryLen);
        for (var i = 0; i < binaryLen; i++) {
            var ascii = binaryString.charCodeAt(i);
            bytes[i] = ascii;
        }
        return bytes;
    }

    function onDocConfirminingDown(data) {
        console.log('isSigningService dont working');
        console.log(data);
        toastr.warning('Elektron imzanın yeni versiyasının(V2) kompyüterinizdə qurulu və ya işlək olmasından əmin olun.');
    }

    function onDocConfirmSuccessReadCertificates(data, status) {
        console.log(data);
        var certificates = data.output.certificates;

        if (data.output.error !== undefined) {
            toastr.warning(data.output.error);
        }

        if (certificates.length > 0) {
            var options = [];

            for (var i = 0; i < certificates.length; i++) {
                options.push(new Option(certificates[i].subject, certificates[i].serialNumber));
            }

            $("select#ctlDocConfirmCertificates").html(options);
        } else {
            toastr.warning('Online imzalayıcı proqramının işlək olmasından və ya imzanızın qoşulu olduğundan əmin olun.');
        }
    }

    function onDocConfirmSuccess(data, status) {
        console.log(data);

        if (data.isSuccess) {
            var token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: `/az/DocOperation/ConfirmDocument?token=${tokenDocId}`,
                type: 'POST',
                dataType: 'json',
                data: { __RequestVerificationToken: token, note: $('#docConfirmNote').val() },
                beforeSend: function () { window.ShowLoading(confirmMsg)},
                success: function (data) {
                    if (data) {
                        $("#docConfirmationDialogModal").modal("hide");

                        var grid = $($("#DocGrid").find("input")[0]).attr("id");

                        setTimeout(function () {
                            $(`#${grid}`).bindgrid();
                        },
                            3000);

                        Swal.fire({
                            type: 'success',
                            title: 'Sənədin təsdiqlənməsi uğurla başa çatdı.',
                            showConfirmButton: false,
                            timer: 1000
                        });

                    } else {
                        toastr.warning("Sənədin təsdiqlənməsi uğursuz oldu.");
                    }
                },
                error: function (response) {
                    console.log('error', response);
                },
                complete: function () { window.CloseLoading();}
            });
        } else {
            toastr.error(data.error);
        }
    }

    function onError(err) {
        toastr.error("Sənədin təsdiqlənməsi uğursuz oldu." + err);
        console.log("onError", err);
    }

    function onConfirmCertReadError(err) {
        toastr.warning('Sertifikatınızın oxunulması mümkün olmadı.');
        console.log("onReadError", err);
    }

    function dataURLtoFile(dataurl, filename) {
        var parts = dataurl.split(',');
        bstr = atob(parts[1]), n = bstr.length, fileBuffer = new Uint8Array(n);
        while (n--) {
            fileBuffer[n] = bstr.charCodeAt(n);
        }
        return new File([fileBuffer], filename, { type: 'edoc' });
    }
</script>